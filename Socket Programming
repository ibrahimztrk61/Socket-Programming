{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import socket\n",
    "import threading\n",
    "from hashlib import sha1\n",
    "\n",
    "# You can add more libraries if you want.\n",
    "\n",
    "HOST = '160.75.154.73'\n",
    "PORT = 1773\n",
    "KEY = '2DE29597A82CE60626028C08B5D0E050'# Enter key you received\n",
    "ID = 150160512 # Your student number\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "# This function is the first function that you are going to develop.\n",
    "# This function gets the connection pointer and does the authentication \n",
    "# according to explanations above.\n",
    "def makeSha1(concatenate, encoding='utf-8'):\n",
    "    return sha1(concatenate.encode(encoding)).hexdigest()\n",
    "\n",
    "def authenticate(s):\n",
    "    s.connect((HOST, PORT))\n",
    "    \n",
    "    data = 'Start_Connection'\n",
    "    s.sendto(data.encode('utf-8'), (HOST, PORT))\n",
    "    \n",
    "    RandomHEX = s.recv(1024)\n",
    "    result = sha1\n",
    "    personalHash = KEY\n",
    "    RandomHex = RandomHEX.decode('utf-8')\n",
    "    concatenate = str(RandomHex)+str(personalHash)\n",
    "    concatenateResult=concatenate.encode('utf-8')\n",
    "   \n",
    "    sha1Result = makeSha1(concatenate, encoding='utf-8')\n",
    "    message2 = (str(sha1Result)+str(\"#\") + str(ID))\n",
    "    s.sendall(message2.encode('utf-8'))\n",
    "    data_received = s.recv(1024).decode('utf-8')\n",
    "    print(data_received)\n",
    "    # Your code here\n",
    "    pass"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "# This function parses the packet and determines the action that must be taken.\n",
    "# For example if the server sends a question packet.\n",
    "# This function must display the question accordingly.\n",
    "def parse_packet(buffer):\n",
    "    packet_type = buffer[0] #header\n",
    "    #print (packet_type)\n",
    "    encoding=['utf-8','utf-16']\n",
    "    \n",
    "    if packet_type == 0:\n",
    "        print ( \"information message\")\n",
    "        encoding_type = encoding[buffer[1]]\n",
    "        size_of_payload = buffer[2]+buffer[3]*256\n",
    "        payload = buffer[4:].decode(encoding_type)\n",
    "        print (payload)\n",
    "        pass\n",
    "    elif packet_type == 1:\n",
    "        print (\"send question\")\n",
    "        encoding_type = encoding[buffer[1]]\n",
    "        size_of_payload = buffer[2]+buffer[3]*256\n",
    "        payload_part1 = buffer[4]+buffer[5]*256\n",
    "        payload_part2 = buffer[6:].decode(encoding_type)\n",
    "        print (payload_part2)    \n",
    "        pass\n",
    "    \n",
    "    elif packet_type == 2:\n",
    "        position = buffer[1]+buffer[2]\n",
    "        payload = buffer[3:].decode('utf-8')\n",
    "        print (\"position: \",position)\n",
    "        print (\"payload: \",payload)\n",
    "        pass\n",
    "    \n",
    "    elif packet_type ==3:\n",
    "        time = buffer[4] + buffer[5]*256\n",
    "        print (\"time: \", time)\n",
    "        pass\n",
    "    \n",
    "    elif packet_type ==4:\n",
    "        encoding_type = encoding[buffer[1]]\n",
    "        overall_score=buffer[1] + buffer[2]*256\n",
    "        remaining_time=buffer[3] + buffer[4]*256\n",
    "        print (\"overall score: \" , overall_score)\n",
    "        print (\"remainning time EOG :\", remaining_time)\n",
    "        pass\n",
    "  \n",
    "    # if packet type == ?\n",
    "    #    do this\n",
    "    # Your code here\n",
    "    pass"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "# This function reads the user input and determines the action that must be taken.\n",
    "# For example if the user enters answer then this function should \n",
    "# create the answer packet and send it to the server.\n",
    "def send_response(connection):\n",
    "    while True:\n",
    "        \n",
    "        user_param = input()\n",
    "        \n",
    "        if user_param == '+S':\n",
    "            connection.sendall(b'\\x00')\n",
    "            print(\"Starts the games\")\n",
    "            pass\n",
    "                \n",
    "        elif user_param == 'exit' :\n",
    "            connection.sendall(b'\\x01')\n",
    "            print(\"Terminates the game\")\n",
    "            pass\n",
    "                \n",
    "        elif user_param == '+Q' :\n",
    "            connection.sendall(b'\\x02')\n",
    "            print(\"get a new question\")\n",
    "                \n",
    "        elif user_param == '+L' :\n",
    "            connection.sendall(b'\\x03')\n",
    "            print(\"get a letter\")\n",
    "                \n",
    "        elif user_param == '+t' :\n",
    "            connection.sendall(b'\\x05')\n",
    "            print(\"get remaining time\")   \n",
    "        else:\n",
    "            header = b'\\x04'\n",
    "            encode = user_param.encode('utf-8')\n",
    "            guessed = (header + encode)\n",
    "            connection.sendall(guessed)\n",
    "            print(\"Guessed: \",guessed)\n",
    "                \n",
    "        # if user param == ?\n",
    "        #    do this\n",
    "            \n",
    "        # Your code here\n",
    "        pass"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "+S: Starts the game \n",
      "exit: Terminates the game \n",
      "+Q: get a new question \n",
      "+L: get a letter \n",
      "+t: get remaining time\n",
      "\n",
      "Authentication is successful.\n",
      "Welcome, İbrahim Öztürk\n",
      "\u0000\n",
      "Main    : before running outgoing thread\n",
      "+S\n",
      "Starts the games\n",
      "information message\n",
      "The new game has been started. Tue Jun 09 2020::ffff:31.145.219.212:42083\n",
      "+Q\n",
      "get a new question\n",
      "send question\n",
      "take action; do something\n",
      "time:  295\n",
      "+L\n",
      "get a letter\n",
      "position:  1\n",
      "payload:  c\n",
      "time:  290\n",
      "time:  285\n",
      "+L\n",
      "get a letter\n",
      "position:  0\n",
      "payload:  a\n",
      "time:  280\n",
      "+L\n",
      "get a letter\n",
      "position:  2\n",
      "payload:  t\n",
      "time:  275\n",
      "time:  270\n",
      "time:  265\n",
      "time:  260\n",
      "time:  255\n",
      "time:  250\n",
      "time:  245\n",
      "action\n",
      "Guessed:  b'\\x04action'\n",
      "information message\n",
      "Wrong answer. Please proceed to the next question.\n",
      "time:  240\n",
      "time:  235\n",
      "time:  230\n",
      "+L\n",
      "get a letter\n",
      "information message\n",
      "Please fetch the next question before taking any guess.\n",
      "time:  225\n",
      "time:  220\n",
      "+Q\n",
      "get a new question\n",
      "send question\n",
      "the force that causes things, especially good things, to happen to you by chance and not as a result of your own efforts or abilities\n",
      "time:  215\n",
      "+L\n",
      "time:  210\n",
      "get a letter\n",
      "position:  1\n",
      "payload:  u\n",
      "time:  205\n",
      "+L\n",
      "get a letter\n",
      "position:  3\n",
      "payload:  k\n",
      "time:  200\n",
      "+L\n",
      "get a letter\n",
      "position:  0\n",
      "payload:  l\n",
      "time:  195\n",
      "+L\n",
      "get a letter\n",
      "position:  2\n",
      "payload:  c\n",
      "time:  190\n",
      "time:  185\n",
      "+L\n",
      "get a letter\n",
      "information message\n",
      "No letters left. Please proceed to the next question.\n",
      "time:  180\n",
      "+Q\n",
      "get a new question\n",
      "send question\n",
      "a style of Japanese film and television animation, typically aimed at adults as well as children.\n",
      "time:  175\n",
      "time:  170\n",
      "anime\n",
      "Guessed:  b'\\x04anime'\n",
      "information message\n",
      "Correct answer, earned 500 points. Please proceed to the next question.\n",
      "time:  165\n",
      "time:  160\n",
      "+Q\n",
      "get a new question\n",
      "send question\n",
      "the meal you eat in the evening\n",
      "time:  155\n",
      "time:  150\n",
      "dinner\n",
      "Guessed:  b'\\x04dinner'\n",
      "information message\n",
      "Correct answer, earned 600 points. Please proceed to the next question.\n",
      "time:  145\n",
      "time:  140\n",
      "time:  135\n",
      "time:  130\n",
      "time:  125\n",
      "+L\n",
      "get a letter\n",
      "information message\n",
      "Please fetch the next question before taking any guess.\n",
      "time:  120\n",
      "+Q\n",
      "get a new question\n",
      "send question\n",
      "an educational institution or establishment, in particular one providing higher education or specialized professional or vocational training.\n",
      "time:  115\n",
      "time:  110\n",
      "+L\n",
      "get a letter\n",
      "position:  5\n",
      "payload:  g\n",
      "time:  105\n",
      "cooleage\n",
      "Guessed:  b'\\x04cooleage'\n",
      "time:  100\n",
      "information message\n",
      "Wrong answer. Please proceed to the next question.\n",
      "+Q\n",
      "get a new question\n",
      "send question\n",
      "treatment for illness or injury, or the study of this\n",
      "time:  95\n",
      "time:  90\n",
      "+L\n",
      "get a letter\n",
      "position:  1\n",
      "payload:  e\n",
      "time:  85\n",
      "+L\n",
      "get a letter\n",
      "position:  2\n",
      "payload:  d\n",
      "time:  80\n",
      "+L\n",
      "get a letter\n",
      "position:  5\n",
      "payload:  i\n",
      "time:  75\n",
      "+L\n",
      "get a letter\n",
      "position:  0\n",
      "payload:  m\n",
      "time:  70\n",
      "time:  65\n",
      "time:  60\n",
      "medicine\n",
      "Guessed:  b'\\x04medicine'\n",
      "information message\n",
      "Correct answer, earned 400 points. Please proceed to the next question.\n",
      "time:  55\n",
      "exit\n",
      "Terminates the game\n",
      "overall score:  56320\n",
      "remainning time EOG : 12805\n"
     ]
    },
    {
     "ename": "KeyboardInterrupt",
     "evalue": "",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-5-7c27c7e205e9>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m     20\u001b[0m     \u001b[0;31m# In_game => handle server side packets.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     21\u001b[0m     \u001b[0;32mwhile\u001b[0m \u001b[0;32mTrue\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 22\u001b[0;31m         \u001b[0mreceived\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0ms\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrecv\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m1024\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     23\u001b[0m         \u001b[0mparse_packet\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mreceived\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mKeyboardInterrupt\u001b[0m: "
     ]
    }
   ],
   "source": [
    "# Explain possible commands\n",
    "# These are completely arbitary and you can do anything you want with them.\n",
    "print(\"+S: Starts the game \\n\" +\n",
    "      \"exit: Terminates the game \\n\" +\n",
    "      \"+Q: get a new question \\n\" +\n",
    "      \"+L: get a letter \\n\" +\n",
    "      \"+t: get remaining time\\n\")\n",
    "\n",
    "# Setup a socket and handle incoming/outgoing connections\n",
    "with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:\n",
    "\n",
    "    # Do authentication\n",
    "    authenticate(s)\n",
    "\n",
    "    # Start a seperate thread for user inputs\n",
    "    outgoing = threading.Thread(target=send_response, args=(s,))\n",
    "    print(\"Main    : before running outgoing thread\")\n",
    "    outgoing.start()\n",
    "    # print('naber')\n",
    "    # In_game => handle server side packets.\n",
    "    while True:\n",
    "        received = s.recv(1024)\n",
    "        parse_packet(received)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
